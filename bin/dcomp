#!/usr/bin/env bash

set -e


function usage() {
  cat <<USAGE >&2
Usage: ${0##*/} [-h] APP COMMAND [ARGS ...]

Manage applications defined as a Docker compose.

The APP parameter is the application name. To use this script, create
a directory with the same name as the application name, and place the
'docker-compose.yml' file there.

The script works as a wrapper of the docker-compose command. As such,
the COMMAND and ARGS parameters are anything that can be valid for
that command.

  -h  Show help

USAGE
  exit ${1:-1}
}


function error() {
  >&2 echo "ERROR: $1"
  exit ${2:-1}
}


# Get the full path to this script's current directory.
function scriptdir() {
  echo "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
}


# Save variables (${@:2}) to the cache directory ($1).
function save_vars() {
  local vardir=$1
  mkdir -p $vardir
  rm -f "$vardir"/*
  for name in "${@:2}" ; do
    [[ ! -z ${!name} ]] && echo "${!name}" > $vardir/$name
  done
}


# Echo the content of the variable ($2) from the cache directory ($1)
# if the variable is not set. If it is set, then simply echo the
# content of the variable.
function load_var() {
  local name=$2
  local varfile="$1/$name"
  if [[ -z ${!name+x} ]]; then
    if [[ -f $varfile ]]; then
      echo $(cat $varfile)
    fi
  else
    echo ${!name}
  fi
}


function main() {
  local app=$1 && [[ -z $app ]] && error "APP is required"
  local command=$2
  local args="${@:3}"

  local appdir="$(scriptdir)/$app"
  [[ ! -d $appdir ]] && error "Application directory not found"

  local vardir="$appdir/env"
  mkdir -p $vardir

  VERSION=$(load_var "$vardir" VERSION) \
    && [[ -z $VERSION ]] && error "VERSION cannot be found"
  LOG_FILTER=$(load_var "$vardir" LOG_FILTER)
  LOG_LEVEL=$(load_var "$vardir" LOG_LEVEL)

  local compose=$appdir/docker-compose.yml \
    && [[ ! -f $compose ]] && error "Compose file ($compose) not found"

  export LOG_FILTER LOG_LEVEL VERSION

  docker-compose -f $compose $command $args

  save_vars "$vardir" LOG_FILTER LOG_LEVEL VERSION
}


while getopts "h" opt; do
  case $opt in
    h)
      usage 0
      ;;
    \?)
      usage
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
shift $(($OPTIND - 1))

main "$@"
