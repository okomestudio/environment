#!/usr/bin/env python3
"""GitHub repositories sync script

This script accesses GitHub repositories via ssh and either clone or
pull the default branch to its head on remote.

Examples
--------

  $ github_pull <username or access_token> --root-dir <root_dir>

will sync all personally owned repos at
*<root_dir>/<login_name>/<repo_name>/*. When GitHub username is
provided instead of access token, you will be prompted for a
password. When omitted, <root_dir> defaults to the current directory.

You may also sync repos from an organization you belong to, e.g.,

  $ github_pull <username or access_token> --org <org>

where <org> is the organization login name.


Requirements
------------

Python packages: github3.py


TODO
----

- Gracefully handle when checkout to the default branch cannot be done
  cleanly due to modified files.
- Get token instead of keep doing 2FA. (?)
- Colorize error messages.

"""
import getpass
import logging
from argparse import ArgumentParser
from argparse import RawTextHelpFormatter
from pathlib import Path
from subprocess import Popen
from tempfile import TemporaryFile

try:
    from github3 import login as login_to_github
except ImportError:
    raise ImportError("Install the github3.py package")


log = logging.getLogger(__name__)


def sh(cmd):
    with TemporaryFile() as f:
        p = Popen(cmd, shell=True, stdout=f, stderr=f)
        stdout, stderr = p.communicate()
        if p.returncode:
            f.seek(0)
            raise Exception(f.read())


def get_api(username_or_token):
    password = getpass.getpass(prompt=f"Enter password for {username_or_token}: ")
    return login_to_github(
        username_or_token,
        password,
        two_factor_callback=lambda: input("Enter 2FA code: "),
    )


def get_repos(gh, org=None):
    if not org:
        for repo in gh.repositories(type="owner"):
            yield repo
    else:
        for _org in gh.organizations():
            if org == _org.login:
                break
        else:
            raise ValueError(f"{org} not found")

        for repo in _org.repositories():
            yield repo


def clone(repo, root_dir):
    path = root_dir / repo.owner.login
    clone_url = f"git@github.com:{repo.owner.login}/{repo.name}.git"
    print(f"CLONE {repo}")
    cmds = (
        "mkdir -p {path}; "
        "cd {path}; "
        'echo "In $(pwd)"; '
        "git clone {clone_url};  "
    ).format(path=path, clone_url=clone_url)
    sh(cmds)


def pull(repo, root_dir):
    path = root_dir / repo.owner.login / repo.name
    print(f"PULL {repo}")
    cmds = (
        "cd {path}; "
        "git fetch -p; "
        "git checkout {default_branch}; "
        "git pull origin {default_branch}; "
    ).format(path=path, default_branch=repo.default_branch)
    sh(cmds)


def main(username_or_token, root_dir, org=None, include=None):
    gh = get_api(username_or_token)
    for repo in get_repos(gh, org=org):
        if include:
            if repo.name not in include:
                continue

        repo_dir = root_dir / repo.owner.login / repo.name
        if not repo_dir.exists():
            func = clone
        else:
            if not (repo_dir.is_dir() and (repo_dir / ".git").is_dir()):
                raise IOError(f"{repo_dir} is not a Git repository")
            func = pull

        try:
            func(repo, root_dir)
        except Exception:
            log.exception(f"Error on {func.__name__}({repo.owner.login}/{repo.name})")


if __name__ == "__main__":
    p = ArgumentParser(description=__doc__, formatter_class=RawTextHelpFormatter)
    p.add_argument("username_or_token", help="GitHub username or access token")
    p.add_argument("-i", "--include", action="append", help="Repositories to include")
    p.add_argument("-o", "--org", help="GitHub organization")
    p.add_argument(
        "--root-dir",
        type=Path,
        default=".",
        help="Root directory under which local repos are cloned",
    )
    main(**vars(p.parse_args()))
