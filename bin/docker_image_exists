#!/usr/bin/env bash

set -e


function usage() {
  cat <<USAGE
Usage: docker_image_exists REGISTRY/REPOSITORY[:TAG]

Test if a Docker image exists on a registry. If the image exists, the
command exits with status code 0. If it does not, the command exits
with the status code 255.

This program requires `curl` and `jq`.

USAGE
  exit ${1:-1}
}


function error() {
  >&2 echo "ERROR: $1"
  exit ${2:-1}
}


# Parse Docker image name ($1)
function parse() {
  local repo_and_tag="$(echo $1 | rev | cut -d/ -f1 | rev)"
  local hosturl="${1/${repo_and_tag}/}"
  hosturl="${hosturl%/}"
  local repo="$(echo $repo_and_tag | cut -d: -f1)"
  local tag="$(echo $repo_and_tag | grep : | cut -d: -f2)"

  declare -A map
  map[hosturl]="$hosturl"
  map[repo]="$repo"
  map[tag]="$tag"
  declare -p map
}


function main() {
  local tmp=$(parse "$1")
  eval "${tmp/map=/img=}"

  local registry="${img[hosturl]}"
  [[ -z $registry ]] && error "Registry is required"

  local tag="${img[tag]:-latest}"
  local url="${registry}/v2/${img[repo]}/tags/list"

  local exists=$(curl -s "$url" | jq ".tags | contains([\"$tag\"])")

  [[ $exists = true ]] && return 0 || return -1
}


while getopts h opt; do
  case $opt in
    h) usage 0 ;;      
    \?) usage 1 ;;
  esac
done
shift $(($OPTIND - 1))
   

main "$@"
