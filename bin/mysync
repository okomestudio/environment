#!/usr/bin/env python
"""File synchronizer

This microserver watches two files and sync them as modification happens. The files are
watched by watchdog (a Python library) and sync is done by unison.

  $ mysync file1 file2
"""
import pathlib
import re
import sys
import time

from argparse import ArgumentParser
from subprocess import run

try:
    from watchdog.events import RegexMatchingEventHandler
    from watchdog.observers import Observer
except ImportError:
    raise ImportError("The watchdog Python package is not available")


def err(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


class Synchronizer:
    def __init__(self, observer, eh1, eh2):
        self.observer = observer
        eh1.synchronize = self.synchronize
        eh2.synchronize = self.synchronize
        self.eh1 = eh1
        self.eh2 = eh2
        self.watches = {}
        self.other = {eh1: eh2, eh2: eh1}

    def schedule_all(self):
        self.schedule(self.eh1)
        self.schedule(self.eh2)

    def schedule(self, event_handler):
        watch = self.observer.schedule(
            event_handler,
            path=str(event_handler.path.parent.absolute()),
            recursive=False,
        )
        self.watches[event_handler] = watch

    def unschedule(self, event_handler):
        self.observer.unschedule(self.watches[event_handler])
        del self.watches[event_handler]

    def synchronize(self, event_handler=None):
        if event_handler:
            other = self.other[event_handler]
            self.unschedule(other)
            self._synchronize()
            self.schedule(other)
        else:
            self._synchronize()

    def _synchronize(self):
        run(
            [
                "unison",
                "-batch",
                "-prefer",
                "newer",
                "-copyonconflict",
                self.eh1.path.absolute(),
                self.eh2.path.absolute(),
            ]
        )


class MyHandler(RegexMatchingEventHandler):
    def __init__(self, path, *args, **kwargs):
        regexes = [r"^" + re.escape(str(path.absolute())) + r"$"]
        kwargs["regexes"] = regexes
        super().__init__(*args, **kwargs)
        self.path = path

    def on_created(self, event):
        err("CREATED", repr(event))
        self.synchronize(self)

    def on_modified(self, event):
        err("MODIFIED", repr(event))
        self.synchronize(self)

    def on_moved(self, event):
        err("MOVED", repr(event), self.path.absolute())
        if event.dest_path == str(self.path.absolute()):
            self.synchronize(self)


def validate_file(path):
    if not path.exists():
        raise IOError(f"File does not exist: {path.absolute()}")
    if not (path.is_file() and not path.is_symlink()):
        raise IOError(f"Not valid files to watch: {path.absolute()}")


def main(path1, path2):
    paths = [path1, path2]
    for path in paths:
        validate_file(path)

    observer = Observer()

    event_handler1 = MyHandler(path1)
    event_handler2 = MyHandler(path2)

    synchronizer = Synchronizer(observer, event_handler1, event_handler2)
    synchronizer.synchronize()
    synchronizer.schedule_all()

    observer.start()

    try:
        while 1:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()


def check_requirements():
    result = run(["which", "unison"])
    if result.returncode != 0:
        raise RuntimeError("The unison command is not available")


if __name__ == "__main__":
    check_requirements()

    p = ArgumentParser(description=__doc__)
    p.add_argument("file1", type=pathlib.Path, help="First file")
    p.add_argument("file2", type=pathlib.Path, help="Second file")
    args = p.parse_args()
    main(args.file1, args.file2)
