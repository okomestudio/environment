;; -*- mode: emacs-lisp -*-
;;; emacs --- Emacs configuration
;;
;;; Commentary:
;;
;; This should be placed at ~/.emacs.
;;
;;
;;; Code:


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ace-isearch-input-length 20)
 '(ace-isearch-jump-delay 0.6)
 '(c-basic-offset 2)
 '(case-fold-search t)
 '(column-number-mode t)
 '(current-language-environment "UTF-8")
 '(default-input-method "rfc1345")
 '(fringe-mode 0 nil (fringe))
 '(global-font-lock-mode t nil (font-lock))
 '(global-whitespace-mode nil)
 '(ido-enable-flex-matching t)
 '(ido-mode (quote both) nil (ido))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(load-home-init-file t t)
 '(make-backup-files nil)
 '(mouse-wheel-mode t nil (mwheel))
 '(mouse-wheel-progressive-speed nil)
 '(mouse-wheel-scroll-amount (quote (3 ((shift) . 1) ((control)))))
 '(package-selected-packages
   (quote
    (any-ini-mode professional-theme github-modern-theme magit web-mode auto-complete use-package helm-swoop ace-jump-mode epc flycheck blacken plantuml-mode yaml-mode scala-mode neotree markdown-mode json-mode jedi flymake-cursor dockerfile-mode cython-mode ansible ace-isearch)))
 '(scroll-bar-mode t)
 '(scroll-bar-width 6 t)
 '(select-enable-clipboard t)
 '(show-paren-mode t nil (paren))
 '(size-indication-mode t)
 '(tab-always-indent t)
 '(tab-width 2)
 '(tool-bar-mode nil)
 '(uniquify-buffer-name-style (quote post-forward) nil (uniquify)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CONFIGS BY TS
;;

;; Activate windmove to switch to another window by M-<U|D|L|R>
(windmove-default-keybindings 'meta)
;; ... or define global shortcuts:
;; (global-set-key (kbd "C-c <left>")  'windmove-left)
;; (global-set-key (kbd "C-c <right>") 'windmove-right)
;; (global-set-key (kbd "C-c <up>")    'windmove-up)
;; (global-set-key (kbd "C-c <down>")  'windmove-down)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Fonts
(when window-system
  (setq monn (length (display-monitor-attributes-list)))
  (if (> (/ (display-pixel-width) monn) 2550)
      (create-fontset-from-ascii-font 
       "Hack:weight=normal:slant=normal:size=18" nil "hackandjp")
    (create-fontset-from-ascii-font 
     "Hack:weight=normal:slant=normal:size=14" nil "hackandjp"))
  (set-fontset-font "fontset-hackandjp"
		                'unicode
		                (font-spec :family "Noto Sans Mono CJK JP")
		                nil 
		                'append)
  (add-to-list 'default-frame-alist '(font . "fontset-hackandjp")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MELPA

;; BUGFIX: For fixing a startup error message:
;;
;;   http.elpa.gnu.org:443*-257153" has a running process; kill it? (y or n) y
;;
;; This bug should be fixed on and after Emacs version 26.3.
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

(require 'package)
(add-to-list 'package-archives
             '("MELPA" . "https://melpa.org/packages/") t)
;; (add-to-list 'package-archives
;;              '("MELPA stable" . "https://stable.melpa.org/packages/") t)
;; (add-to-list 'package-archives
;;              '("Marmalade" . "https://marmalade-repo.org/packages/"))

;; For important compatibility libraries like cl-lib
;; (when (< emacs-major-version 24)
;;   (add-to-list 'package-archives
;;                '("gnu" . "https://elpa.gnu.org/packages/")))

(package-initialize)


;; custom emacs lisp files
(if (file-directory-p "~/.emacs.d/lisp/")
    (add-to-list 'load-path "~/.emacs.d/lisp/"))


;; use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents) (package-install 'use-package))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ENVIRONMENT

;; for clipboard
;(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)

;;(set-face-attribute 'default nil :height 75)
(setq ring-bell-function 'ignore) ; disable beeping

;; for frame-cmds.el
(setq frame-title-format '("" "%f"))


;; Dired -- ignore some files
(require 'dired-x)
(setq-default dired-omit-files-p t)
(setq dired-omit-files "^\\.$\\|^\\.\\.$\\|\\.pyc$\\|\\.pyo$\\|\#$")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flyspell

(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flycheck

(use-package flycheck
             :ensure t
             :init (global-flycheck-mode))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Magit for Git

(use-package magit
  :ensure t)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; highlight-indent-guides

(use-package highlight-indent-guides
  :ensure t
  :config
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-auto-character-face-perc 25))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Theme

(use-package professional-theme
  :ensure t
  :config
  (load-theme 'professional t))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; auto-complete
(use-package auto-complete
  :ensure t
  :config
  ;; (setq ac-show-menu-immediately-on-auto-complete t)
  (setq ac-max-width 0.35)
  (ac-config-default))


;; NeoTree
(unless (package-installed-p 'neotree)
  (package-refresh-contents) (package-install 'neotree))
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
(setq neo-hidden-regexp-list '("^\\."
                               "\\.cs\\.meta$"
                               "\\.pyc$"
                               "~$"
                               "^#.*#$"
                               "\\.elc$"
                               "^__pycache__$"))

;; Every time when the neotree window is opened, let it find current
;; file and jump to node.
(setq neo-smart-open t)

;; Open the Neo Tree window on start.
(neotree-toggle)


;; ansible-mode
(unless (package-installed-p 'ansible)
  (package-refresh-contents) (package-install 'ansible))
(defun find-vault-password (name)
  (setq dir (locate-dominating-file default-directory name))
  (if dir
      (concat dir name)
    "~/vault_pass"))
(defun setup-ansible-mode ()
  (interactive)
  (setq ansible::vault-password-file (find-vault-password "vault-password"))
  (ansible 1))
(add-hook 'yaml-mode-hook 'setup-ansible-mode)

(add-hook 'ansible-hook 'ansible::auto-decrypt-encrypt)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Shell/BASH

(defun setup-sh-mode ()
  (interactive)
  (setq sh-basic-offset 2
        sh-indentation 2))
(add-hook 'sh-mode-hook 'setup-sh-mode)
(add-to-list 'auto-mode-alist '("/bashrc\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("/bash_.*\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.bats\\'" . sh-mode))
(add-to-list 'interpreter-mode-alist '("bats" . sh-mode))

(add-hook 'sh-mode-hook 'highlight-indent-guides-mode)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; C

(setq c-mode-hook
      (function (lambda ()
                  (setq indent-tabs-mode nil)
                  (setq c-indent-level 4))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; JavaScript/HTML/CSS

(unless (package-installed-p 'web-mode)
  (package-refresh-contents) (package-install 'web-mode))

(add-hook 'web-mode-hook 'highlight-indent-guides-mode)

(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))

(setq web-mode-markup-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-code-indent-offset 2)

(setq web-mode-style-padding 2)
(setq web-mode-script-padding 2)

;; This is necessary to format JSX within JavaScript
(add-hook 'web-mode-hook
          (lambda ()
            (if (equal web-mode-content-type "javascript")
                (web-mode-set-content-type "jsx"))))


;; Flycheck configuration
(require 'flycheck)

;; Disable checkers not in use
(setq-default flycheck-disabled-checkers
              (append flycheck-disabled-checkers '(json-jsonlist)))
(setq-default flycheck-disabled-checkers
              (append flycheck-disabled-checkers '(javascript-jshint)))

;; For linters, install the following:
;;
;;   $ sudo npm install -g eslint babel-eslint eslint-plugin-react
;;   $ sudo apt install tidy
;;   $ sudo npm install -g csslint
;;
(flycheck-add-mode 'javascript-eslint 'web-mode)
(flycheck-add-mode 'html-tidy 'web-mode)
(flycheck-add-mode 'css-csslint 'web-mode)
(add-hook 'web-mode-hook
          (lambda ()
            (cond ((string= web-mode-content-type "html")
                   (when (executable-find "tidy")
                     (flycheck-select-checker 'html-tidy)))
                  ((string= web-mode-content-type "css")
                   (when (executable-find "csslint")
                     (flycheck-select-checker 'css-css-lint)))
                  ((or (string= web-mode-content-type "javascript")
                       (string= web-mode-content-type "jsx"))
                   (when (executable-find "eslint")
                     (flycheck-select-checker 'javascript-eslint))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PlantUML

(if (version< emacs-version "25.0")
    (message "is before 25.0")
  (unless (package-installed-p 'plantuml-mode)
    (package-refresh-contents) (package-install 'plantuml-mode))
  (setq plantuml-jar-path "/usr/share/plantuml/plantuml.jar"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; any-ini-mode
(if (file-exists-p "~/.emacs.d/lisp/any-ini-mode.el")
    (progn (require 'any-ini-mode)
           (add-to-list 'auto-mode-alist '(".*\\.service$" . any-ini-mode))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Markdown
;;
;; - Allows browser preview with C-c C-c v
;;

(unless (package-installed-p 'markdown-mode)
  (package-refresh-contents) (package-install 'markdown-mode))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Dockerfile

(unless (package-installed-p 'dockerfile-mode)
  (package-refresh-contents) (package-install 'dockerfile-mode))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; JSON

(unless (package-installed-p 'json-mode)
  (package-refresh-contents) (package-install 'json-mode))
(add-to-list 'auto-mode-alist '("\\.json.j2\\'" . json-mode))
(add-hook 'json-mode-hook
          (lambda ()
            (make-local-variable 'js-indent-level)
            (setq js-indent-level 2)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; YAML

(unless (package-installed-p 'yaml-mode)
  (package-refresh-contents) (package-install 'yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yml.j2\\'" . yaml-mode))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org

;; (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
;; (unless (package-installed-p 'org)
;;   (package-refresh-contents) (package-install 'org))

;; (setq org-support-shift-select t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SCALA

;; (unless (package-installed-p 'scala-mode)
;;   (package-refresh-contents) (package-install 'scala-mode))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SQL
(require 'sql)


;; Autocompletion
(if (file-exists-p "~/.emacs.d/lisp/sql-upcase.el")
    (progn (require 'sql-upcase)
           (when (require 'sql-upcase nil :noerror)
             (add-hook 'sql-mode-hook 'sql-upcase-mode)
             (add-hook 'sql-interactive-mode-hook 'sql-upcase-mode))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PYTHON

;;(setq python-shell-interpreter "python3")

;; python-mode
(unless (package-installed-p 'python)
  (package-refresh-contents) (package-install 'python))
(require 'python)
;; (load-library "python")
;; (autoload 'python-mode "python-mode" "Python Mode." t)
;; (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
;; (add-to-list 'interpreter-mode-alist '("python" . python-mode))
;; (setq interpreter-mode-alist
;;       (cons '("python" . python-mode)
;;             interpreter-mode-alist)
;;       python-mode-hook
;;       '(lambda () (progn
;;                     (set-variable 'py-indent-offset 4)
;;                     (set-variable 'indent-tabs-mode nil))))

;; cython-mode
(unless (package-installed-p 'cython-mode)
  (package-refresh-contents) (package-install 'cython-mode))
(require 'cython-mode)

;; Use ipython if available
(when (executable-find "ipython")
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i"))

;; Remove trailing whitespace on save
(add-hook 'python-mode-hook
          (lambda ()
            (add-hook 'local-write-file-hooks
                      '(lambda ()
                         (save-excursion
                           (delete-trailing-whitespace))))))

;; highlight-indent-guides-mode
(add-hook 'python-mode-hook 'highlight-indent-guides-mode)

;; flycheck -- Python code checking
;;
;; Need `pip install flake8`
;;
(add-hook 'python-mode-hook 'flycheck-mode)

;; Spell checking
(add-hook 'python-mode-hook
          (lambda ()
            (flyspell-prog-mode)))

;; jedi.el -- Autocompletion for python
;;
;; On first install, the following needs to be run within Emacs:
;;
;;   M-x jedi:install-server RET

(use-package epc
  :ensure t)

(use-package popup
  :ensure t)

(use-package jedi
  :ensure t
  :init
  (add-hook 'python-mode-hook #'jedi:setup)
  (add-to-list 'ac-sources 'ac-source-jedi-direct)
  :config
  (setq jedi:complete-on-dot t)
  (setq jedi:tooltip-method '(popup)))

;; if using multiple virtual env, this might become useful:
;;
;;   http://stackoverflow.com/questions/21246218/how-can-i-make-emacs-jedi-use-project-specific-virtualenvs
;; (setq jedi:server-args (list (or (buffer-file-name) default-directory)))
;; (push "--sys-path" jedi:server-args)
;; (message "for jedi:server-args %s" jedi:server-args)

;; black -- The opinionated Python code formatter
;;
;; Need `pip install black` to actually use it.
;;
;; To activate blacken-mode per project basis, place
;;
;;   ((python-mode . ((eval . (blacken-mode 1)))))
;;
;; in .dir-locals.el.

(if (version< emacs-version "25.2")
    (message "is before 25.2")
  (unless (package-installed-p 'blacken-mode)
    (package-refresh-contents) (package-install 'blacken)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CUSTOM FUNCTIONS

(defun ts/insert-line-before (times)
  "Insert a newline(s) above the line containing the cursor."
  (interactive "p") ; called from M-x
  (save-excursion ; store position
    (move-beginning-of-line 1)
    (newline times))) ; insert new line
(global-set-key (kbd "C-S-o")
                'ts/insert-line-before)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CUSTOM KEYBINDINGS

;; Window resize
(global-set-key [C-s-left] 'shrink-window-horizontally)
(global-set-key [C-s-right] 'enlarge-window-horizontally)
(global-set-key [C-s-down] 'shrink-window)
(global-set-key [C-s-up] 'enlarge-window)


;; ace-isearch -- Enhanced isearch
;;
;; Based on the number of characters used for search, ace-isearch uses
;; different mode.
(unless (package-installed-p 'ace-jump-mode)
  (package-refresh-contents) (package-install 'ace-jump-mode))
(unless (package-installed-p 'helm-swoop)
  (package-refresh-contents) (package-install 'helm-swoop))
(unless (package-installed-p 'ace-isearch)
  (package-refresh-contents) (package-install 'ace-isearch))
(require 'ace-isearch)
(global-ace-isearch-mode 1)


;; Buffer reloading
;;
;; [F5] to trigger revert-buffer without confirmation.
(defun revert-buffer-no-confirm (&optional force-reverting)
  "Interactive call to revert-buffer. Ignoring the auto-save file
   and not requesting for confirmation. When the current buffer
   is modified, the command refuses to revert it, unless you
   specify the optional argument: force-reverting to true."
  (interactive "P")
  (if (or force-reverting (not (buffer-modified-p)))
      (revert-buffer :ignore-auto :noconfirm)
    (error "The buffer has been modified")))
(global-set-key (kbd "<f5>") 'revert-buffer-no-confirm)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
